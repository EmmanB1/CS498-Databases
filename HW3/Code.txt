# Part 3
import os
import pandas as pd
df = pd.read_csv("/content/Electric_Vehicle_Population_Data.csv")

new_df = df[["DOL Vehicle ID","Make", "Model" , "Model Year", "Electric Range", "City", "County"]]
cols = new_df.columns.tolist()

def to_bytes(value):
    if isinstance(value, bytes):
        return value
    elif isinstance(value, (int, float, bool)):
        return str(value).encode('utf-8')
    elif isinstance(value, str):
        return value.encode('utf-8')
from google.cloud import bigtable
from google.cloud.bigtable import row
from google.cloud import storage
from google.oauth2 import service_account

credentials = service_account.Credentials.from_service_account_file(
    "/content/cs498hw-295befb47db2.json"
)
# client = storage.Client(credentials=credentials)
# Configuration
project_id = "cs498hw"
instance_id = "ev-bigtable"
table_id = "ev-population"
column_family_id = "ev_info"  # Default column family

# Connect to Bigtable
client = bigtable.Client(project=project_id, admin=True, credentials=credentials)
instance = client.instance(instance_id)
table = instance.table(table_id)


Import data
data_to_import = new_df.values
for idx, data in enumerate(data_to_import):
    if idx % 10000 == 0:
      print("at:", idx)
    # print(lem )
    bt_row = table.direct_row(to_bytes(data[0]))
    for i in range(1, len(data)):
      # print(data)
      bt_row.set_cell(
          column_family_id,
          to_bytes(cols[i]),
          to_bytes(data[i]),
      )
    bt_row.commit()

print("Data successfully imported into Bigtable.")

# Part 4
from flask import Flask
from google.cloud import bigtable
from google.cloud.bigtable import row
from google.cloud import storage
from google.oauth2 import service_account

credentials = service_account.Credentials.from_service_account_file(
    "cs498hw-295befb47db2.json"
)
client = bigtable.Client(project=project_id, admin=True, credentials=credentials)
instance = client.instance(instance_id)
table = instance.table(table_id)
app = Flask(__name__)

@app.route("/rows")
def get_rows():
    return str(sum(1 for _ in table.read_rows()))

@app.route("/Best-BMW")
def best_bmw():
  count = 0
  for row_key, row in rows.rows.items():
    for fname, cols in row.cells.items():
      e_range = float(cols[b'Electric Range'][0].value.decode('utf-8'))
      if e_range > 100:
        count += 1
      break

    return str(count)

@app.route("/tesla-owner")
def tesla_owner():
  count = 0
  for row_key, row in rows.rows.items():
    for fname, cols in row.cells.items():
      make = cols[b'Make'][0].value.decode('utf-8')
      city = cols[b'City'][0].value.decode('utf-8')

      if make == "TESLA" and city == "Seattle":
        count += 1
      break

  return str(count)

@app.route("/update")
def update():
  obj = table.row("257246118")
  obj.set_cell(column_family_id, b"Electric Range", "200")
  obj.commit()
  return "Success"


@app.route("/delete")
def to_delete():
  count = 0
  for row_key, row in rows.rows.items():
    for fname, cols in row.cells.items():
      year = float(cols[b'Model Year'][0].value.decode('utf-8'))

      if year < 2014:
        to_delete = table.row(row_key)
        to_delete.delete()
        to_delete.commit()
      else:
        count += 1

      
      break
  return str(count)

if __name__ == "__main__":
  app.run(host='0.0.0.0', port=5000)